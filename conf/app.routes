# microservice specific routes

# Should it be PUT as calling this method twice does not create two users (idempotent operation)
POST        /personal-details/:userId/:applicationId                     controllers.CandidateDetailsController.updateDetails(userId: String, applicationId: String)
GET         /personal-details/:userId/:applicationId                     controllers.CandidateDetailsController.find(userId: String, applicationId: String)

GET         /scheme-preferences/:applicationId                           controllers.SchemePreferencesController.find(applicationId: String)
PUT         /scheme-preferences/:applicationId                           controllers.SchemePreferencesController.update(applicationId: String)

GET         /partner-graduate-programmes/:applicationId                  controllers.PartnerGraduateProgrammesController.find(applicationId: String)
PUT         /partner-graduate-programmes/:applicationId                  controllers.PartnerGraduateProgrammesController.update(applicationId: String)

PUT         /assistance-details/:userId/:applicationId                   controllers.AssistanceDetailsController.update(userId: String, applicationId: String)
GET         /assistance-details/:userId/:applicationId                   controllers.AssistanceDetailsController.find(userId: String, applicationId: String)

PUT         /application/create                                          controllers.ApplicationController.createApplication
GET         /application/progress/:applicationId                         controllers.ApplicationController.applicationProgress(applicationId: String)
GET         /application/status/:applicationId                           controllers.ApplicationController.findApplicationStatusDetails(applicationId: String)
GET         /application/find/user/:userId/framework/:frameworkId        controllers.ApplicationController.findApplication(userId: String, frameworkId: String)
PUT         /application/preview/:applicationId                          controllers.ApplicationController.preview(applicationId: String)
PUT         /application/submit/:userId/:applicationId                   controllers.SubmitApplicationController.submitApplication(userId: String, applicationId: String)
PUT         /application/withdraw/:applicationId                         controllers.ApplicationController.withdrawApplication(applicationId: String)
PUT         /application/confirm/adjustment/:applicationId               controllers.ApplicationController.confirmAdjustment(applicationId:String)

PUT         /media/create                                                controllers.MediaController.addMedia()

PUT         /phase1/pass-mark-settings/create                            controllers.Phase1PassMarkSettingsController.create
GET         /phase1/pass-mark-settings/getLatestVersion                  controllers.Phase1PassMarkSettingsController.getLatestVersion

GET         /assessment-centre/pass-mark-settings                        controllers.AssessmentCentrePassMarkSettingsController.getLatestVersion
PUT         /assessment-centre/pass-mark-settings                        controllers.AssessmentCentrePassMarkSettingsController.create

GET         /assessment-schedule                                         controllers.AssessmentScheduleController.getAssessmentSchedule
GET         /assessment-schedule/venue/:venue/date/:date                 controllers.AssessmentScheduleController.getVenueDayCandidateSchedule(venue: String, date: String)
GET         /assessment-schedule/details/venue/:venue/date/:date         controllers.AssessmentScheduleController.getVenueDayCandidateScheduleWithDetails(venue: String, date: String)
GET         /assessment-schedule/application/:applicationId              controllers.AssessmentScheduleController.getApplicationAssessment(applicationId: String)
DELETE      /assessment-schedule/application/:applicationId              controllers.AssessmentScheduleController.deleteApplicationAssessment(applicationId: String)
GET         /assessment-schedule/centre-location/location/:locationName  controllers.AssessmentScheduleController.locationToAssessmentCentreLocation(locationName: String)
GET         /assessment-schedule/location/:location                      controllers.AssessmentScheduleController.getApplicationForAssessmentAllocation(location: String, start: Int, end: Int)
GET         /assessment-centres                                          controllers.AssessmentScheduleController.assessmentCentres
GET         /assessment-centre-capacities/venue/:venue                   controllers.AssessmentScheduleController.getAssessmentCentreCapacities(venue: String)
GET         /assessment-centre-allocation/venue/:venue                   controllers.AssessmentScheduleController.getAllocationsForVenue(venue: String)
POST        /assessment-centre-allocation                                controllers.AssessmentScheduleController.allocate

GET         /allocation-status/:applicationId                            controllers.AssessmentScheduleController.allocationStatus(applicationId)
POST        /allocation-status/confirm/:applicationId                    controllers.AssessmentScheduleController.confirmAllocation(applicationId)

PUT         /questionnaire/:applicationId/:sectionKey                    controllers.QuestionnaireController.addSection(applicationId: String,sectionKey: String)

GET         /search/find-by-id/user/:userId/framework/:frameworkId       controllers.SearchForApplicantsController.findById(userId: String, frameworkId: String)
POST        /search/find-by-criteria                                     controllers.SearchForApplicantsController.findByCriteria
GET         /report/diversity/:frameworkId                               controllers.ReportingController.diversityReport(frameworkId: String)
GET         /report/adjustments/:frameworkId                             controllers.ReportingController.adjustmentReport(frameworkId: String)
GET         /report/candidate-progress/:frameworkId                      controllers.ReportingController.candidateProgressReport(frameworkId: String)
GET         /report/online-test-pass-mark/:frameworkId                   controllers.ReportingController.onlineTestPassMarkReport(frameworkId: String)
#GET         /report/assessment-centre-allocation/:frameworkId            controllers.ReportingController.createAssessmentCentreAllocationReport(frameworkId: String)
#GET         /report/pass-mark-personal-data/:frameworkId                 controllers.ReportingController.createPassMarkWithPersonalDataReport(frameworkId: S#tring)
#GET         /report/non-submitted-applications/:frameworkId              controllers.ReportingController.createNonSubmittedAppsReports(frameworkId: String)
#GET         /report/preferences-and-contact/:frameworkId                 controllers.ReportingController.createPreferencesAndContactReports(frameworkId: String)
#GET         /report/application-user-ids/:frameworkId                    controllers.ReportingController.applicationAndUserIdsReport(frameworkId: String)
#GET         /report/assessment-results/:frameworkId                      controllers.ReportingController.createAssessmentResultsReport(frameworkId: String)
#GET         /report/successful-candidates/:frameworkId                   controllers.ReportingController.createSuccessfulCandidatesReport(frameworkId: String)

GET         /diagnostic/user/:userId                                     controllers.DiagnosticReportController.getUserById(userId: String)

GET         /online-test/candidate/:applicationId                        controllers.OnlineTestController.getOnlineTest(applicationId: String)
GET         /online-test-phase2/candidate/:applicationId                 controllers.OnlineTestController.getPhase2OnlineTest(applicationId: String)
POST        /online-test/candidate/:userId/status                        controllers.OnlineTestController.onlineTestStatusUpdate(userId: String)
POST        /online-test/reset/:appId                                    controllers.OnlineTestController.resetOnlineTests(appId: String)


PUT         /cubiks/:cubiksUserId/start                                  controllers.CubiksTestsController.start(cubiksUserId: Int)
PUT         /cubiks/:cubiksUserId/complete                               controllers.CubiksTestsController.complete(cubiksUserId: Int)
PUT         /cubiks/complete-by-token/:token                             controllers.CubiksTestsController.completeTestByToken(token: String)
PUT         /cubiks/:cubiksUserId/results-ready                          controllers.CubiksTestsController.markResultsReady(cubiksUserId: Int)

POST        /phase1-test-group/extend/:applicationId                     controllers.Phase1TestGroupController.extend(applicationId: String)

GET         /phase3-test-group/:applicationId                            controllers.Phase3TestGroupController.getTestGroup(applicationId: String)

GET         /test-scores/application/:applicationId                      controllers.CandidateScoresController.getCandidateScores(applicationId: String)
PUT         /test-scores/application/:applicationId                      controllers.CandidateScoresController.createCandidateScoresAndFeedback(applicationId: String)
PUT         /test-scores/accept/application/:applicationId               controllers.CandidateScoresController.acceptCandidateScoresAndFeedback(applicationId: String)

GET         /application/:applicationId/issue                            controllers.FlagCandidateController.find(applicationId: String)
PUT         /application/:applicationId/issue                            controllers.FlagCandidateController.save(applicationId: String)
DELETE      /application/:applicationId/issue                            controllers.FlagCandidateController.remove(applicationId: String)

GET         /schools                                                     controllers.SchoolsController.getSchools(term: String)