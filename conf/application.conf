# Copyright 2017 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName=fset-faststream
application.router=prod.Routes
application.global=config.MicroserviceGlobal
application.langs="en"
application.secret="nVXesXUo1SO9GsQNPeDV8EumUsNLCqdvQmZ9X6lVXy2Y5Z43iu55KWUm3bZ3dO98"
application.session.httpOnly=false
application.session.secure=false

play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"
play.modules.enabled += "play.filters.csrf.CSRFModule"

#Required for object based play2.5 applications
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

controllers {
    com.kenshoo.play.metrics.MetricsController = {
      needsAuth = false
      needsLogging = false
    }

    controllers.UserController = {
      needsAuth = false
      needsLogging = false
    }
}

metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = true
    enabled = true
}

# Ensure that the total timeout short so that in situations of failure, the amount of requests outstanding is short
# This is to ensure that the service doesn't get too backlogged when mongo briefly goes down
ws.timeout.request = 10000

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

microservice {
  frameworks {
    yamlFilePath: regions-locations-frameworks.yaml
  }
  schemes {
    yamlFilePath: schemes.yaml
  }
  events {
    scheduleFilePath: event-schedule.yaml
    subtypes {
      fsbFilePath = fsb-types.yaml
      telephoneInterviewFilePath = telephone-interview-types.yaml
    }
  }
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }
  services {
    auth {
      host = localhost
      port = 8500
      serviceName = faststream18
    }
    email {
      url = "http://localhost:8300"
    }
    user-management {
      url = "http://localhost:8094"
    }
    cubiks-gateway {
      url = "http://localhost:9288"
      phase1Tests {
        expiryTimeInDays = 7
        scheduleIds {
          sjq = 16196
          bq = 16194
        }
        standard = [ sjq, bq ]
        gis = [ sjq ]
      }
      phase2Tests {
        expiryTimeInDays = 7
        expiryTimeInDaysForInvigilatedETray = 90
        schedules = {
          daro = {
            scheduleId = 16380
            assessmentId = 153
          },
          irad = {
            scheduleId = 16737
            assessmentId = 156
          },
          ward = {
            scheduleId = 16738
            assessmentId = 157
          }
        }
      }
      competenceAssessment {
        assessmentId = 127
      }
      situationalAssessment {
        assessmentId = 131
      }
      reportConfig {
        xmlReportId = 384
        pdfReportId = 383
        localeCode = "en-GB"
        suppressValidation = true
      }
      candidateAppUrl = "http://localhost:9284"
      emailDomain = "mailinator.com"
    }
    launchpad-gateway {
      url = "http://localhost:9295"
      phase3Tests {
        # Note: This expiry figure *must* match configuration in the Launchpad Interview Administration UI
        # or one side will expire before the other does
        timeToExpireInDays = 7
        invigilatedTimeToExpireInDays = 90
        candidateCompletionRedirectUrl = "http://localhost:9284"
        interviewsByAdjustmentPercentage {
          0pc = 46
          25pc = 67
          33pc = 68
          40pc = 69
          50pc = 70
          75pc = 71
          100pc = 72
        }
        evaluationWaitTimeAfterResultsReceivedInHours = 96
        verifyAllScoresArePresent = true
      }
    }
    assessment-evaluation {
      minimum-competency-level {
        enabled = true
        minimumCompetencyLevelScore = 2.0
      }
    }
  }
}

scheduling {
  online-testing {
    send-phase1-invitation-job {
      enabled = false
      lockId = "send-phase1-invitation-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
    }
    send-phase2-invitation-job {
      enabled = false
      lockId = "send-phase2-invitation-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      batchSize = 50
    }
    send-phase3-invitation-job {
      enabled = false
      lockId = "send-phase3-invitation-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      batchSize = 5
    }
    first-phase1-reminder-expiring-test-job {
      enabled = false
      lockId = "first-phase1-reminder-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
    }
    second-phase1-reminder-expiring-test-job {
      enabled = false
      lockId = "second-phase1-reminder-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
    }
    first-phase2-reminder-expiring-test-job {
      enabled = false
      lockId = "first-phase2-reminder-lock-coordinator"
      initialDelaySecs = 31
      intervalSecs = 30
    }
    second-phase2-reminder-expiring-test-job {
      enabled = false
      lockId = "second-phase2-reminder-lock-coordinator"
      initialDelaySecs = 31
      intervalSecs = 30
    }
    first-phase3-reminder-expiring-test-job {
      enabled = false
      lockId = "first-phase3-reminder-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
    }
    second-phase3-reminder-expiring-test-job {
      enabled = false
      lockId = "second-phase3-reminder-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
    }
    expiry-phase1-job {
      enabled = false
      lockId = "expiry-phase1-job-lock-coordinator"
      initialDelaySecs = 40
      intervalSecs = 30
    }
    expiry-phase2-job {
      enabled = false
      lockId = "expiry-phase2-job-lock-coordinator"
      initialDelaySecs = 41
      intervalSecs = 30
    }
    expiry-phase3-job {
      enabled = false
      lockId = "expiry-phase3-job-lock-coordinator"
      initialDelaySecs = 42
      intervalSecs = 30
    }
    failed-phase1-test-job {
      enabled = false
      lockId = "failed-phase1-test-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
    }
    failed-phase2-test-job {
      enabled = false
      lockId = "failed-phase2-test-job-lock-coordinator"
      initialDelaySecs = 32
      intervalSecs = 30
    }
    failed-phase3-test-job {
      enabled = false
      lockId = "failed-phase3-test-job-lock-coordinator"
      initialDelaySecs = 33
      intervalSecs = 30
    }
    failed-sdip-fs-test-job {
      enabled = false
      lockId = "failed-sdip-fs-test-job-lock-coordinator"
      initialDelaySecs = 36
      intervalSecs = 30
    }
    success-sdip-fs-test-job {
      enabled = false
      lockId = "success-sdip-fs-test-job-lock-coordinator"
      initialDelaySecs = 37
      intervalSecs = 30
    }
    success-phase1-test-job {
      enabled = false
      lockId = "success-phase1-test-job-lock-coordinator"
      initialDelaySecs = 34
      intervalSecs = 30
    }
    success-phase3-test-job {
      enabled = false
      lockId = "success-phase3-test-job-lock-coordinator"
      initialDelaySecs = 34
      intervalSecs = 30
    }
    retrieve-phase1-results-job {
      enabled = false
      lockId = "retrieve-phase1-results-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      waitSecs = 5
    }
    retrieve-phase2-results-job {
      enabled = false
      lockId = "retrieve-phase2-results-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      waitSecs = 5
    }
    evaluate-phase1-result-job {
      enabled = false
      lockId = "evaluate-phase1-result-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      batchSize = 10
    }
    evaluate-phase2-result-job {
      enabled = false
      lockId = "evaluate-phase2-result-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      batchSize = 10
    }
    evaluate-phase3-result-job {
      enabled = false
      lockId = "evaluate-phase3-result-job-lock-coordinator"
      initialDelaySecs = 30
      intervalSecs = 30
      batchSize = 10
    }
    progress-sdipFs-candidate-for-sdip-job {
      enabled = false
      lockId = "progress-sdipFs-candidate-for-sdip-job-lock-coordinator",
      initialDelaySecs = 30
      intervalSecs = 30
    }
    fixer-job {
      enabled = false
      lockId = "fixer-job-lock-coordinator"
      initialDelaySecs = 45
      intervalSecs = 600
      batchSize = 10
    }
    locations-and-venues {
      yamlFilePath = locations-and-venues.yaml
    }
  }
  progress-to-sift-job {
    enabled = false
    lockId = "progress-to-sift-job-lock-coordinator"
    initialDelaySecs = 30
    intervalSecs = 30
  }
  progress-to-assessment-centre-job {
    enabled = false
    lockId = "progress-to-assessment-centre-job-lock-coordinator"
    initialDelaySecs = 30
    intervalSecs = 30
  }
  parity-export-job {
    enabled = false
    lockId = "parity-export-job-lock-coordinator"
    initialDelaySecs = 20
    intervalSecs = 60
    batchSize = 1
  }
  parity-update-export-job {
    enabled = false
    lockId = "parity-update-export-job-lock-coordinator"
    initialDelaySecs = 20
    intervalSecs = 60
    batchSize = 1
  }
  confirm-attendance-reminder-job {
    enabled = false
    lockId = "confirm-attendance-reminder-job-coordinator"
    initialDelaySecs = 30
    intervalSecs = 300
  }
  evaluate-assessment-score-job {
    enabled = false
    lockId = "evaluate-assessment-score-job-lock-coordinator"
    initialDelaySecs = 30
    intervalSecs = 30
  }
  notify-assessment-centre-passed-or-failed-job {
    enabled = false
    lockId = "notify-assessment-centre-passed-or-failed-job-lock-coordinator"
    initialDelaySecs = 30
    intervalSecs = 30
  }
}

mongodb {
  failoverStrategy {
    initialDelayMsecs = 500
    retries = 4
    delay {
      factor = 0.5
      function = linear
    }
  }
  uri = "mongodb://localhost:27017/fset-faststream"
}

maxNumberOfDocuments = 10
